/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ExperiencesRiversideRouteImport } from './routes/experiences/riverside'

const ExperiencesWaterLazyRouteImport = createFileRoute('/experiences/water')()
const ExperiencesGrassfieldLazyRouteImport = createFileRoute(
  '/experiences/grassfield',
)()
const ExperiencesGrassLazyRouteImport = createFileRoute('/experiences/grass')()
const ExperiencesBushLazyRouteImport = createFileRoute('/experiences/bush')()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ExperiencesWaterLazyRoute = ExperiencesWaterLazyRouteImport.update({
  id: '/experiences/water',
  path: '/experiences/water',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/experiences/water.lazy').then((d) => d.Route),
)
const ExperiencesGrassfieldLazyRoute =
  ExperiencesGrassfieldLazyRouteImport.update({
    id: '/experiences/grassfield',
    path: '/experiences/grassfield',
    getParentRoute: () => rootRouteImport,
  } as any).lazy(() =>
    import('./routes/experiences/grassfield.lazy').then((d) => d.Route),
  )
const ExperiencesGrassLazyRoute = ExperiencesGrassLazyRouteImport.update({
  id: '/experiences/grass',
  path: '/experiences/grass',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/experiences/grass.lazy').then((d) => d.Route),
)
const ExperiencesBushLazyRoute = ExperiencesBushLazyRouteImport.update({
  id: '/experiences/bush',
  path: '/experiences/bush',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/experiences/bush.lazy').then((d) => d.Route),
)
const ExperiencesRiversideRoute = ExperiencesRiversideRouteImport.update({
  id: '/experiences/riverside',
  path: '/experiences/riverside',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/experiences/riverside': typeof ExperiencesRiversideRoute
  '/experiences/bush': typeof ExperiencesBushLazyRoute
  '/experiences/grass': typeof ExperiencesGrassLazyRoute
  '/experiences/grassfield': typeof ExperiencesGrassfieldLazyRoute
  '/experiences/water': typeof ExperiencesWaterLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/experiences/riverside': typeof ExperiencesRiversideRoute
  '/experiences/bush': typeof ExperiencesBushLazyRoute
  '/experiences/grass': typeof ExperiencesGrassLazyRoute
  '/experiences/grassfield': typeof ExperiencesGrassfieldLazyRoute
  '/experiences/water': typeof ExperiencesWaterLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/experiences/riverside': typeof ExperiencesRiversideRoute
  '/experiences/bush': typeof ExperiencesBushLazyRoute
  '/experiences/grass': typeof ExperiencesGrassLazyRoute
  '/experiences/grassfield': typeof ExperiencesGrassfieldLazyRoute
  '/experiences/water': typeof ExperiencesWaterLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/experiences/riverside'
    | '/experiences/bush'
    | '/experiences/grass'
    | '/experiences/grassfield'
    | '/experiences/water'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/experiences/riverside'
    | '/experiences/bush'
    | '/experiences/grass'
    | '/experiences/grassfield'
    | '/experiences/water'
  id:
    | '__root__'
    | '/'
    | '/experiences/riverside'
    | '/experiences/bush'
    | '/experiences/grass'
    | '/experiences/grassfield'
    | '/experiences/water'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExperiencesRiversideRoute: typeof ExperiencesRiversideRoute
  ExperiencesBushLazyRoute: typeof ExperiencesBushLazyRoute
  ExperiencesGrassLazyRoute: typeof ExperiencesGrassLazyRoute
  ExperiencesGrassfieldLazyRoute: typeof ExperiencesGrassfieldLazyRoute
  ExperiencesWaterLazyRoute: typeof ExperiencesWaterLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experiences/water': {
      id: '/experiences/water'
      path: '/experiences/water'
      fullPath: '/experiences/water'
      preLoaderRoute: typeof ExperiencesWaterLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experiences/grassfield': {
      id: '/experiences/grassfield'
      path: '/experiences/grassfield'
      fullPath: '/experiences/grassfield'
      preLoaderRoute: typeof ExperiencesGrassfieldLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experiences/grass': {
      id: '/experiences/grass'
      path: '/experiences/grass'
      fullPath: '/experiences/grass'
      preLoaderRoute: typeof ExperiencesGrassLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experiences/bush': {
      id: '/experiences/bush'
      path: '/experiences/bush'
      fullPath: '/experiences/bush'
      preLoaderRoute: typeof ExperiencesBushLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/experiences/riverside': {
      id: '/experiences/riverside'
      path: '/experiences/riverside'
      fullPath: '/experiences/riverside'
      preLoaderRoute: typeof ExperiencesRiversideRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExperiencesRiversideRoute: ExperiencesRiversideRoute,
  ExperiencesBushLazyRoute: ExperiencesBushLazyRoute,
  ExperiencesGrassLazyRoute: ExperiencesGrassLazyRoute,
  ExperiencesGrassfieldLazyRoute: ExperiencesGrassfieldLazyRoute,
  ExperiencesWaterLazyRoute: ExperiencesWaterLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
